version: "3.9"

services:
  # API Gateway/Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - app-network

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - ./data:/mnt/data:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - app-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Background Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: ["python", "-m", "celery", "worker", "--loglevel=info"]
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - ./data:/mnt/data:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - app-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-medsummarizer}
      - POSTGRES_USER=${POSTGRES_USER:-meduser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-medpass123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: ["python", "-m", "celery", "beat", "--loglevel=info"]
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - app-network

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge 