name: Deploy to AWS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: med-summarizer-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v
    
    - name: Lint code
      run: |
        pip install flake8 black
        flake8 app.py scripts/
        black --check app.py scripts/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
    
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init
    
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="postgres_password=${{ secrets.POSTGRES_PASSWORD }}" \
          -out=tfplan
      env:
        TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
    
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply tfplan
      env:
        TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
    
    - name: Get deployment outputs
      working-directory: ./terraform
      run: |
        echo "ALB_DNS=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV
        echo "ECR_REPO_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV
    
    - name: Wait for service to be ready
      run: |
        echo "Waiting for service to be ready..."
        sleep 60
        
        # Test the deployment
        for i in {1..10}; do
          if curl -f "http://${{ env.ALB_DNS }}/health" > /dev/null 2>&1; then
            echo "✅ Service is responding correctly"
            break
          else
            echo "⏳ Attempt $i: Service not ready yet, waiting..."
            sleep 30
          fi
        done
    
    - name: Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application Load Balancer: http://${{ env.ALB_DNS }}"
        echo "📦 ECR Repository: ${{ env.ECR_REPO_URL }}"
        echo "📚 API Documentation: http://${{ env.ALB_DNS }}/docs"
        echo "💚 Health Check: http://${{ env.ALB_DNS }}/health" 